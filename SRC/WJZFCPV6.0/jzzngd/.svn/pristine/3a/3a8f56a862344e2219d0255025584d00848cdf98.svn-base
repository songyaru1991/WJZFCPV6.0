package com.netmarch.jzzngd.system.Interceptor;

import com.alibaba.fastjson.JSON;
import com.netmarch.jzzngd.common.utils.HttpClientUtils;
import com.netmarch.jzzngd.system.model.LoginResult;
import net.sf.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.Map;

@Component
public class LoginInterceptor implements HandlerInterceptor {

    /**
     * 在请求被处理之前调用
     * @param request
     * @param response
     * @param handler
     * @return
     * @throws Exception
     */
    /**
     * RefreshToken过期时间
     */
    @Value("${refreshTokenExpireTime}")
    private String refreshTokenExpireTime;
    @Value("${uums.url}")
    private String uumsUrl;


    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object o) throws Exception {
       // String requestURL = request.getRequestURL().toString();
        String requestURL = "http://172.16.11.20:8088/jzzngd/znjz/casejbxx";
        String loginVerifyURL = "http://172.16.11.20:8088/jzzngd/loginVerify";
//        String requestURL = "http://172.16.1.71:8088/jzzngd/znjz/casejbxx";
//        String loginVerifyURL = "http://172.16.1.71:8088/jzzngd/loginVerify";
//        String requestURL = "http://172.16.1.163:8088/jzzngd/znjz/casejbxx";
//        String loginVerifyURL = "http://172.16.1.163:8088/jzzngd/loginVerify";
//        String requestURL = "http://172.16.11.251:8088/jzzngd/znjz/casejbxx";
//        String loginVerifyURL = "http://172.16.11.251:8088/jzzngd/loginVerify";
        String redirectUrl = uumsUrl+"/loginVerify?callbackURL=" + loginVerifyURL;
        try {
            String cookieJwt="";
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                if (cookies != null) {
                    for (Cookie c : cookies) {
                        if (c.getName().equals("jwt")) {
                            cookieJwt = c.getValue();
                            break;
                        }
                    }
                }
                if (cookieJwt != "" && !cookieJwt.equals("")) {
                        //客户端cookie中存的为key:sid    value:tonken
                    String url = uumsUrl+"/loginVerifyJwt";
                    String body = "";
                    Map<String,String> map = new HashMap<String, String>();
                    map.put("jwt", cookieJwt);
                    body = HttpClientUtils.sendPostDataByJson(url, JSON.toJSONString(map), cookieJwt);
                    if(body!="" && !body.equals("")) {
                        JSONObject jsonobject = JSONObject.fromObject(body);
                        LoginResult loginResult = (LoginResult) JSONObject.toBean(jsonobject, LoginResult.class);
                        if (loginResult.getStatus() == 200) {//cas验证jwt成功
                            return true;
                        }
                        else{
                            logger.error("JWT验证失败，链接:" + requestURL);
                            response.sendRedirect(redirectUrl);
                            return false;
                        }
                    }else{
                        logger.error("JWT验证异常，链接:" + requestURL);
                        response.sendRedirect(redirectUrl);
                        return false;
                    }
                }else{
                    logger.error("cookie中获取jwt失败，链接:" + requestURL);
                    response.sendRedirect(redirectUrl);
                    return false;
                }
            } else {
                logger.error("cookie不存在，链接:" + requestURL);
                //参数乱码 message = URLEncoder.encode(message,"GBK");
               response.sendRedirect(redirectUrl);
               return false;
            }
        } catch (Exception e) {
            logger.error("登录拦截器异常");
            response.sendRedirect(redirectUrl);
            return false;
        }
    }

    /**
     * 在请求被处理后，视图渲染之前调用
     * @param request
     * @param response
     * @param handler
     * @param modelAndView
     * @throws Exception
     */
    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,ModelAndView modelAndView) throws Exception {

    }

    /**
     * 在整个请求结束后调用
     * @param request
     * @param response
     * @param handler
     * @param ex
     * @throws Exception
     */
    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {

    }
}
