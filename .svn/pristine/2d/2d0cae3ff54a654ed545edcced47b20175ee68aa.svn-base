package com.netmarch.jzznyj.common.utils;

import lombok.extern.slf4j.Slf4j;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.apache.poi.util.IOUtils;
import org.apache.rocketmq.common.utils.HttpTinyClient;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;


/**
 * 
 * @Description: HTTP共通类 
 * @Copyright 晶安智慧
 * @author liuyu
 * @date 2018年6月29日 下午2:31:32
 * =================Modify Record=================
 * @Modifier	@date			        @Content
 * liuyu     2018年6月29日 下午2:31:32	新建
 *
 */
@Slf4j
@Service
public class HttpUtil {

    private CloseableHttpClient httpClient;

    public  HttpUtil() {
        // 1 创建HttpClinet，相当于打开浏览器
        this.httpClient = HttpClients.createDefault();
    }

	/**
	 * 
	 * @description: get 方式请求 
	 * @param url
	 * @param param
	 * @return 返回信息   
	 * @author gdy
	 * @date 2019年6月5日 下午2:31:55
	 * =================Modify Record=================
	 * @Modifier	     @date			       @Content
	 *  gdy           2018年6月5日 下午2:31:55	         新建
	 *
	 */
	public static String get(String url, String param)
    {
		log.info(MessageFormat.format("第三方请求 request：url={0},param={1}", url,param));
        BufferedReader in = null;
        try
        {
            URL httpurl = new URL(url);
            HttpURLConnection httpConn = (HttpURLConnection) httpurl.openConnection();
            httpConn.setRequestMethod("GET");// 提交模式
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            httpConn.setReadTimeout(30000);
            httpConn.setConnectTimeout(30000);
            PrintWriter out = new PrintWriter(new OutputStreamWriter(httpConn.getOutputStream(),"utf-8"));
//            out.print(param);
            out.flush();
            out.close();
            in = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), "UTF-8"));
            StringBuffer sb = new StringBuffer();
            String line = "";
            while ((line = in.readLine()) != null)
            {
            	sb.append(line);
            }
            log.info(MessageFormat.format("第三方请求 result：{0}", sb.toString()));
            return sb.toString();
        }
        catch (Exception e)
        {
        	log.error("Exception", e);
        }
        finally
        {
            if (in != null)
            {
                try 
                {
                    in.close();
                } 
                catch (IOException e) 
                {
                	log.error("Exception", e);
                } 
            }
        }
        
        return "";
    }
	
	/**
	 * 
	 * @description: POST/JSON请求 
	 * @param url
	 * @param param
	 * @return 返回信息   
	 * @author gdy
	 * @date 2019年6月5日 下午2:32:50
	 * =================Modify Record=================
	 * @Modifier	     @date			       @Content
	 *  gdy           2019年6月5日 下午2:32:50	         新建
	 *
	 */
    public static String postJson(String url, String param)
    {
		log.info(MessageFormat.format("第三方请求信息：url={0},param={1}", url,param));
        BufferedReader in = null;
        try
        {
            URL httpurl = new URL(url);
            HttpURLConnection httpConn = (HttpURLConnection) httpurl.openConnection();
            httpConn.setRequestMethod("POST");// 提交模式
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            httpConn.setReadTimeout(30000);
            httpConn.setConnectTimeout(30000);
            httpConn.setRequestProperty("Content-Type", "application/json");
            PrintWriter out = new PrintWriter(new OutputStreamWriter(httpConn.getOutputStream(),"utf-8"));
//            out.print(param);
            out.flush();
            out.close();
            in = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), "UTF-8"));
            StringBuffer sb = new StringBuffer();
            String line = "";
            while ((line = in.readLine()) != null)
            {
            	sb.append(line);
            }
            log.info(MessageFormat.format("第三方请求 result：{0}", sb.toString()));
            return sb.toString();
        }
        catch (Exception e)
        {
        	log.error("Exception", e);
        }
        finally
        {
            if (in != null)
            {
                try 
                {
                    in.close();
                } 
                catch (IOException e) 
                {
                	log.error("Exception", e);
                } 
            }
        }
        
        return "";
    }
    
    /**
	 * 
	 * @description: POST/JSON请求 
	 * @param url
	 * @param param
	 * @return 返回信息   
	 * @author gdy
	 * @date 2019年6月5日 下午2:32:50
	 * =================Modify Record=================
	 * @Modifier	     @date			       @Content
	 *  gdy           2019年6月5日 下午2:32:50	         新建
	 *
	 */
    public static String post(String url, String param)
    {
		log.info(MessageFormat.format("pollution 第三方请求信息：url={0},param={1}", url,param));
        BufferedReader in = null;
        try
        {
            URL httpurl = new URL(url);
            HttpURLConnection httpConn = (HttpURLConnection) httpurl.openConnection();
            httpConn.setRequestMethod("POST");// 提交模式
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            httpConn.setReadTimeout(30000);
            httpConn.setConnectTimeout(30000);
            
            PrintWriter out = new PrintWriter(new OutputStreamWriter(httpConn.getOutputStream(),"utf-8"));
            out.print(param);
            out.flush();
            out.close();
            in = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), "UTF-8"));
            StringBuffer sb = new StringBuffer();
            String line = "";
            while ((line = in.readLine()) != null)
            {
            	sb.append(line);
            }
            log.info(MessageFormat.format("第三方请求 result：{0}", sb.toString()));
            return sb.toString();
        }
        catch (Exception e)
        {
        	log.error("Exception", e);
        }
        finally
        {
            if (in != null)
            {
                try 
                {
                    in.close();
                } 
                catch (IOException e) 
                {
                	log.error("Exception", e);
                } 
            }
        }
        
        return "";
    }




        /**
         * 带参数的post请求
         *
         * @param url
         * @param map
         * @return
         * @throws Exception
         */
        public  HttpTinyClient.HttpResult doPost(String url, Map<String, Object> map) throws Exception {
            // 声明httpPost请求
            HttpPost httpPost = new HttpPost(url);

            // 判断map不为空
            if (map != null) {
                // 声明存放参数的List集合
                List<NameValuePair> params = new ArrayList<NameValuePair>();

                // 遍历map，设置参数到list中
                for (Map.Entry<String, Object> entry : map.entrySet()) {
                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().toString()));
                }

                // 创建form表单对象
                UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(params, "utf-8");
                formEntity.setContentType("Content-Type:application/json");

                // 把表单对象设置到httpPost中
                httpPost.setEntity(formEntity);
            }

            // 使用HttpClient发起请求，返回response
            CloseableHttpResponse response = this.httpClient.execute(httpPost);

            // 解析response封装返回对象httpResult
            HttpTinyClient.HttpResult httpResult = null;
            if (response.getEntity() != null) {
                httpResult = new HttpTinyClient.HttpResult(response.getStatusLine().getStatusCode(),
                        EntityUtils.toString(response.getEntity(), "UTF-8"));
            } else {
                httpResult = new HttpTinyClient.HttpResult(response.getStatusLine().getStatusCode(), "");
            }
            // 返回结果
            return httpResult;
        }

    /**
     * 上传文件到指定地址URL
     *
     * @param fileName 文件名
     * @param filePath 文件路径
     * @param urlStr   上传地址
     * @return
     */
    public String uploadFile(String fileName, String filePath, String urlStr) {
        byte[] buffer = null;
        try {
            File file = new File(filePath);
            FileInputStream fis = new FileInputStream(file);
            ByteArrayOutputStream bos = new ByteArrayOutputStream(1000);
            byte[] b = new byte[1000];
            int n;
            while ((n = fis.read(b)) != -1) {
                bos.write(b, 0, n);
            }
            fis.close();
            bos.close();
            buffer = bos.toByteArray();
            ByteArrayInputStream inStream = new ByteArrayInputStream(buffer);
            // 换行符
            final String newLine = "\r\n";
            // 服务器的上传地址
            URL url = new URL(urlStr);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            // 设置为POST情
            conn.setRequestMethod("POST");
            // 发送POST请求必须设置如下两行
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            // 设置请求头参数
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("Charset", "UTF-8");
            conn.setRequestProperty("Content-Type", "multipart/form-data; boundary=----WebKitFormBoundaryari0emH33oMihIU4");
            conn.setRequestProperty("User-Agent","Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36");

            OutputStream out = new DataOutputStream(conn.getOutputStream());

            // 上传文件
            StringBuilder sb = new StringBuilder();
            sb.append(newLine);
            // 文件参数
            sb.append("------WebKitFormBoundaryari0emH33oMihIU4\n" +
                    "Content-Disposition: form-data; name=\"file\"; filename=\"" + fileName + "\"");
            sb.append("Content-Type:application/octet-stream");
            // 参数头设置完以后需要两个换行，然后才是参数内容
            sb.append(newLine);
            sb.append(newLine);

            // 将参数头的数据写入到输出流中
            out.write(sb.toString().getBytes());

            // 数据输入流,用于读取文件数据
            DataInputStream in = new DataInputStream(inStream);
            byte[] bufferOut = new byte[2048];
            int bytes = 0;
            // 每次读2KB数据,并且将文件数据写入到输出流中
            while ((bytes = in.read(bufferOut)) != -1) {
                out.write(bufferOut, 0, bytes);
            }
            // 最后添加换行
            out.write(newLine.getBytes());
            in.close();
            // 定义最后数据分隔线，即--加上BOUNDARY再加上--。
            byte[] end_data = "------WebKitFormBoundaryari0emH33oMihIU4--".getBytes();
            // 写上结尾标识
            out.write(end_data);
            out.flush();
            out.close();

            // 定义BufferedReader输入流来读取URL的响应
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    conn.getInputStream(),"UTF-8"));
            StringBuffer buffer2 = new StringBuffer();
            String line = null;
            while ((line = reader.readLine()) != null) {
                buffer2.append(line);
            }
            return buffer2.toString();
        } catch (Exception e) {
            System.out.println("发送POST请求出现异常！" + e);
            e.printStackTrace();
        }
        return "";
    }

    public static String uploadFileToServer(String zipPath,String filename,String url) {
        CloseableHttpClient client = null;
        String result = null;
        try {
            File filesss = new File(zipPath);
            FileInputStream input = new FileInputStream(filesss);
            MultipartFile multfile =new MockMultipartFile("file", filesss.getName(), "text/plain", IOUtils.toByteArray(input));
            client = HttpClients.createDefault();
            HttpPost httpPost = new HttpPost(url);
            MultipartEntityBuilder builder = MultipartEntityBuilder.create();
            //addTextBody(String,String)该方法可以传入参数，例如请求的地址需要接受一个id
            //builder.addTextBody("id", "1");
//            builder.addTextBody("arg", "value");
            //addBinaryBody()该方法传入二进制内容，可以传入InputStream，File, 参数三是传入的类型，参数四是文件名称
            builder.addBinaryBody("filename", multfile.getInputStream(), ContentType.MULTIPART_FORM_DATA, filename);
            httpPost.setEntity(builder.build());
            HttpResponse response = client.execute(httpPost);
            if (response.getStatusLine().getStatusCode() == 200) {
                // 取回服务器端的响应结果
                result = EntityUtils.toString(response.getEntity(), "utf-8");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            try {
                client.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return result;
    }

    public static String doGet(String httpurl) {
        HttpURLConnection connection = null;
        InputStream is = null;
        BufferedReader br = null;
        String result = null;// 返回结果字符串
        try {
            // 创建远程url连接对象
            URL url = new URL(httpurl);
            // 通过远程url连接对象打开一个连接，强转成httpURLConnection类
            connection = (HttpURLConnection) url.openConnection();
            // 设置连接方式：get
            connection.setRequestMethod("GET");
            // 设置连接主机服务器的超时时间：15000毫秒
            connection.setConnectTimeout(15000);
            // 设置读取远程返回的数据时间：60000毫秒
            connection.setReadTimeout(60000);
            // 发送请求
            connection.connect();
            // 通过connection连接，获取输入流
            if (connection.getResponseCode() == 200) {
                is = connection.getInputStream();
                // 封装输入流is，并指定字符集
                br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
                // 存放数据
                StringBuffer sbf = new StringBuffer();
                String temp = null;
                while ((temp = br.readLine()) != null) {
                    sbf.append(temp);
                    sbf.append("\r\n");
                }
                result = sbf.toString();
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            // 关闭资源
            if (null != br) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            if (null != is) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            connection.disconnect();// 关闭远程连接
        }

        return result;
    }
}
