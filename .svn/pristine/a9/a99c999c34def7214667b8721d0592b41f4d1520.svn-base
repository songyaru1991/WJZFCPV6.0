package com.netmarch.sso.loginsystem.controller;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.Page;
import com.netmarch.sso.common.controller.FrontBaseController;
import com.netmarch.sso.common.thymeleaf.AuthElementTagProcessor;
import com.netmarch.sso.common.utils.UsersUtil;
import com.netmarch.sso.loginsystem.bean.Area;
import com.netmarch.sso.loginsystem.bean.StaticObj;
import com.netmarch.sso.loginsystem.service.AreaService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import util.web.JsonResult;
import util.web.ResultCodes;

import javax.servlet.http.HttpServletRequest;
import java.util.UUID;

/**
 * @program: figurecloud
 * @description: AreaController controller
 * @author: songyaru
 * @create: 2019-05-13
 **/
@Controller
@RequestMapping("/area/*")
@Slf4j
public class AreaController extends FrontBaseController{

    @Autowired
    private AreaService areaService;

    @Autowired
    private UsersUtil usersUtil;

    @RequestMapping("list")
    public String list(HttpServletRequest request, Area area, String keyword, Model model){
        String userName = "",user_Id="";
        try {
            userName= usersUtil.getLoginUserName();
            user_Id=usersUtil.getLoginUser_Id();
            Page<Area> areas = areaService.getAreaList(area, keyword);
            model.addAttribute("list", areas);
            model.addAttribute("keyword", keyword);
            log(user_Id,"查询列表","获取区域信息列表","区域管理(单点登录系统)",false);
        } catch (Exception e) {
            e.printStackTrace();
            log(user_Id,"查询列表",e.toString(),"区域管理",true);
        }
        return "area/list";
    }

    /**
     * 添加页面
     * @param model
     * @return
     */
    @RequestMapping("toAdd")
    public String toAdd(Model model){
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();

            log(user_Id, "点击区域管理新增按钮","点击区域管理新增按钮", "区域管理(单点登录系统)", false);
        } catch (Exception e) {
            log(user_Id, "点击区域管理新增按钮", e.toString(), "区域管理(单点登录系统)", true);
            e.printStackTrace();
        }
        return "area/add";
    }

    /**
     * 编辑页面
     * @param model
     * @return
     */
    @GetMapping("toEdit")
    public String toEdit(HttpServletRequest request,Model model, String id){
        String userName = "",user_Id="";
        try {
            userName= usersUtil.getLoginUserName();
            user_Id=usersUtil.getLoginUser_Id();
            Area area = areaService.getAreaById(id);
            model.addAttribute("bean", area);
            String jsonResults = JSON.toJSONString(area);
            log(user_Id, "点击区域管理编辑按钮", "编辑前区域信息为"+jsonResults, "区域管理(单点登录系统)", false);

        } catch (Exception e) {
            log(user_Id, "点击区域管理编辑按钮", e.toString(), "区域管理(单点登录系统)", true);
            e.printStackTrace();
        }
        return "area/edit";
    }

    /**
     * 保存区域
     * @param area
     * @return
     */
    @RequestMapping("/add")
    @ResponseBody
    public JsonResult save(HttpServletRequest request, Area area){
        String userName = "",user_Id="";
        try {
            userName= usersUtil.getLoginUserName();
            user_Id=usersUtil.getLoginUser_Id();

            int countAreaCode = areaService.checkRepeatAreaCode(area);
            if(countAreaCode > 0){
                return new JsonResult(ResultCodes.ERROR, StaticObj.REPEAT_MSG_NAME);
            }

             area.setId(UUID.randomUUID().toString());
            String jsonResults=JSON.toJSONString(area);
            int result = areaService.addArea(area);
            if(result <= 0){
                log(user_Id,"新增区域保存失败",jsonResults,"区域管理(单点登录系统)",false);
                return new JsonResult(ResultCodes.ERROR, StaticObj.UPDATE_MSG_ERROR);
            }

            log(user_Id,"新增区域保存成功",jsonResults,"区域管理(单点登录系统)",false);
        } catch (Exception e) {
            log(user_Id,"新增区域保存失败",e.toString(),"区域管理(单点登录系统)",true);
            e.printStackTrace();
            return new JsonResult(ResultCodes.ERROR, StaticObj.UPDATE_MSG_ERROR);
        }
        AuthElementTagProcessor.initAuthMap();
        return new JsonResult(ResultCodes.SUCCESS, StaticObj.UPDATE_MSG_SUCCESS, "/area/list");
    }

    @RequestMapping("/edit")
    @ResponseBody
    public JsonResult edit(HttpServletRequest request,Area area){
        String userName = "",user_Id="";
        try {
            userName= usersUtil.getLoginUserName();
            user_Id=usersUtil.getLoginUser_Id();
            
            int countAreaCode = areaService.checkRepeatAreaCode(area);
            if(countAreaCode > 0){
                return new JsonResult(ResultCodes.ERROR, StaticObj.REPEAT_MSG_NAME);
            }

           String jsonResults=JSON.toJSONString(area);
            int result = areaService.editArea(area);
            if(result <= 0){
                log(user_Id,"编辑区域保存失败",jsonResults,"区域管理(单点登录系统)",false);
                return new JsonResult(ResultCodes.ERROR,StaticObj.UPDATE_MSG_ERROR);
            }
            log(user_Id, "编辑区域保存成功", "编辑后区域信息为"+jsonResults, "区域管理(单点登录系统)", false);
        } catch (Exception e) {
            log(user_Id,"编辑区域保存失败",e.toString(),"区域管理(单点登录系统)",true);
            e.printStackTrace();
            return new JsonResult(ResultCodes.ERROR,StaticObj.UPDATE_MSG_ERROR);
        }
        AuthElementTagProcessor.initAuthMap();
        return new JsonResult(ResultCodes.SUCCESS,StaticObj.UPDATE_MSG_SUCCESS, "/area/list");
    }

    @RequestMapping("delBatch")
    @ResponseBody
    public JsonResult delBatch(HttpServletRequest request,String ids){
        String userName = "",user_Id="";
        try {
            userName= usersUtil.getLoginUserName();
            user_Id=usersUtil.getLoginUser_Id();
            int result = areaService.delBatch(ids);
            if(result <= 0){
                log(user_Id,"删除区域保存失败","批量删除id为"+ids+"的区域信息失败","区域管理(单点登录系统)",false);
                return new JsonResult(ResultCodes.ERROR,StaticObj.UPDATE_MSG_ERROR);
            }
            log(user_Id,"删除区域保存成功",ids,"区域管理(单点登录系统)",false);
        } catch (Exception e) {
            log(user_Id,"删除区域保存失败",e.toString(),"区域管理(单点登录系统)",true);
            e.printStackTrace();
            return new JsonResult(ResultCodes.ERROR,StaticObj.UPDATE_MSG_ERROR);
        }
        AuthElementTagProcessor.initAuthMap();
        return new JsonResult(ResultCodes.SUCCESS,StaticObj.UPDATE_MSG_SUCCESS, "/area/list");
    }


}
