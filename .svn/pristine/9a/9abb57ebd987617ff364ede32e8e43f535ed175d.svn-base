package com.netmarch.wsgl.system.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.github.pagehelper.Page;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.netmarch.wsgl.common.controller.FrontBaseController;
import com.netmarch.wsgl.common.thymeleaf.AuthElementTagProcessor;
import com.netmarch.wsgl.common.utils.HttpClientUtil;
import com.netmarch.wsgl.common.utils.UsersUtil;
import com.netmarch.wsgl.system.bean.*;
import com.netmarch.wsgl.system.service.AreaService;
import com.netmarch.wsgl.system.service.DepartmentsService;
import com.netmarch.wsgl.system.service.LoginUserService;
import com.netmarch.wsgl.system.service.SysRoleService;
import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONObject;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import util.web.JsonResult;
import util.web.ResultCodes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.UUID;

/**
 * @program: wsgl
 * @description: loginuser controller
 * @author: songyaru
 * @create: 2019-05-02
 **/
@Controller
@RequestMapping("/user/*")
@Slf4j
public class LoginUserController extends FrontBaseController{
    @Autowired
    private HttpServletRequest request;

    @Autowired
    private HttpServletResponse response;

    @Autowired
    private LoginUserService loginUserService;

    @Autowired
    private DepartmentsService departmentsService;

    @Autowired
    private AreaService areaService;

    @Autowired
    private SysRoleService sysRoleService;

    @Autowired
    UsersUtil usersUtil;

    @Value("${uums.url}")
    private String uumsUrl;

    @RequestMapping(value = {"list", "tableList"})
    public String list(LoginUser user, Query usersQuery, Model model){
        String requestURI="",user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            LoginUser loginUser=usersUtil.getUserById(user_Id);
            user.setYhlb(loginUser.getYhlb());
            String yhlb = loginUser.getYhlb()== null ? null : loginUser.getYhlb().toLowerCase();
            if("admin".equals(yhlb)){
                user.setYhlb("sfjwsglxt");
            }
            user.setAreaCode(loginUser.getAreaCode());
            user.setArea(loginUser.getArea());
            Page<LoginUser> loginUsers = loginUserService.getUserList(user, usersQuery);
            model.addAttribute("list", loginUsers);
            model.addAttribute("usersQuery", usersQuery);
            if(usersQuery.getSearchContent()==null || usersQuery.getSearchContent().equals("")){
                log(user_Id,"用户信息列表","获取所有的用户信息","文书管理系统(司法局文书管理)",false);
            }
            else{
                log(user_Id,"用户信息列表","获取所有用户信息列表,查询参数为:" +  JSON.toJSONString(usersQuery),"文书管理系统(司法局文书管理)",false);
            }
            requestURI=request.getRequestURI();
        } catch (Exception e) {
            e.printStackTrace();
            log(user_Id,"查询列表",e.toString(),"文书管理系统(司法局文书管理)",true);
        }
        if(requestURI.equals("/wsgl-sfj/user/tableList")){
            return "user/list::table_refresh";
        }
        else if(requestURI.equals("/wsgl-sfj/user/list")) {
            return "user/list";
        }
        return "user/list";
    }

   /**
     * 添加页面
     * @param model
     * @return
     */
    @RequestMapping("toAdd")
    public String toAdd(HttpServletRequest request,Model model){
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            String searchCondition= request.getParameter("searchCondition");
          String searchContent= request.getParameter("searchContent");
          if(searchContent!=null && !searchContent.equals("")){
              searchContent=searchContent.trim();
          }

            String pageNo= request.getParameter("pageNo");
            model.addAttribute("searchCondition", searchCondition);
            model.addAttribute("searchContent", searchContent);
            model.addAttribute("pageNo", pageNo);

            List<Area> arealist=areaService.getArea();
            model.addAttribute("arealist", arealist);
            LoginUser user=usersUtil.getUserById(user_Id);
            model.addAttribute("bean", user);

            String area=user.getArea();
            String areaCode=user.getAreaCode();
            model.addAttribute("area", area);
            model.addAttribute("areaCode", areaCode);

            List<Departments> departmentsList= departmentsService.getDepartments(null);
            model.addAttribute("departmentsList", departmentsList);

            List<SysRole> roleList = sysRoleService.getAllUserdRoles();
            model.addAttribute("roleList",roleList);
            log(user_Id, "点击用户新增按钮", "打开用户新增页面", "文书管理系统(司法局文书管理)", false);
        } catch (Exception e) {
            log(user_Id, "点击用户新增按钮", e.toString(), "文书管理系统(司法局文书管理)", true);
            e.printStackTrace();
        }
        return "user/add";
    }

    /**
     * 编辑页面
     * @param model
     * @return
     */
    @GetMapping(value="toEdit" ,produces={ MediaType.APPLICATION_JSON_VALUE })
    public String toEdit(HttpServletRequest request,Model model, String user_Id){
        String loginUser_Id="";
        try {
            loginUser_Id=usersUtil.getLoginUser_Id();
            String jwt = usersUtil.getJwtCookie();
            String searchCondition= request.getParameter("searchCondition");
          String searchContent= request.getParameter("searchContent");
          if(searchContent!=null && !searchContent.equals("")){
              searchContent=searchContent.trim();
          }
            String pageNo= request.getParameter("pageNo");
            model.addAttribute("searchCondition", searchCondition);
            model.addAttribute("searchContent", searchContent);
            model.addAttribute("pageNo", pageNo);

            List<Area> arealist=areaService.getArea();
            model.addAttribute("arealist", arealist);

            List<Departments> departmentsList= departmentsService.getDepartments(null);
            model.addAttribute("departmentsList", departmentsList);
            LoginUser user=loginUserService.getLoginUserByUserId(user_Id);

            String roleIds = loginUserService.getUserRoleIdsByUserId(user_Id);
            user.setGrantroles(roleIds);
            model.addAttribute("bean", user);

            LoginUser loginUser=usersUtil.getUserById(loginUser_Id);

            model.addAttribute("loginUser", loginUser);
            String area=loginUser.getArea();
            String areaCode=loginUser.getAreaCode();
            model.addAttribute("area", area);
            model.addAttribute("areaCode", areaCode);

            List<SysRole> roleList = sysRoleService.getAllUserdRoles();
            model.addAttribute("roleList",roleList);

            Gson gson = new GsonBuilder().serializeNulls().create();
            String jsonResults = gson.toJson(user);
            log(loginUser_Id, "点击用户编辑按钮", "编辑前用户信息为:"+jsonResults, "文书管理系统(司法局文书管理)", false);

        } catch (Exception e) {
            log(loginUser_Id, "点击用户编辑按钮", e.toString(), "文书管理系统(司法局文书管理)", true);
            e.printStackTrace();
        }
        return "user/edit";
    }

    /**
     * 保存用户
     * @param resultBean
     * @return
     */
    @RequestMapping(value="/add" ,produces={ MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public JsonResult save(@RequestBody ResultBean resultBean){
        //return loginUserClient.addLoginUser(resultBean);
        JsonResult jsonResult = null;
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            LoginUser loginUser=resultBean.getLoginUser();
            loginUser.setYhlb("sfjwsglxt");
            loginUser.setAdduser(user_Id);
            loginUser.setUser_Id(UUID.randomUUID().toString());
            loginUser.setUsertype(2);//除单点登录系统外系统其他增加的用户默认用户类别为2：普通用户
            BCryptPasswordEncoder encoder =new BCryptPasswordEncoder();
            loginUser.setPassword(encoder.encode(loginUser.getPassword()));

            String areaCode_area=loginUser.getAreaCode();
            String areaCode = StringUtils.substringBeforeLast(areaCode_area, "_");
            loginUser.setAreaCode(areaCode);
            resultBean.setLoginUser(loginUser);

            //本系统数据库用户新增
            jsonResult = this.addLoginUser(resultBean);

            //单点登录系统用户新增
            String jwt = usersUtil.getJwtCookie();
            String url = uumsUrl + "/userClient/add";
            String body = "";
            body = HttpClientUtil.sendPostDataByJson(url, JSON.toJSONString(resultBean), jwt);
            if(body!="" && !body.equals("")) {
                JSONObject jsonobject = JSONObject.fromObject(body);
                jsonResult = (JsonResult) JSONObject.toBean(jsonobject, JsonResult.class);
            }else{
                log(user_Id, "用户新增保存失败", "HttpClient调用uums系统的用户新增方法返回结果为null", "用户管理(司法局文书管理)", false);
                return new JsonResult(ResultCodes.ERROR, "用户新增操作保存失败！");
            }


        } catch (Exception e) {
            log(user_Id, "用户新增保存失败", e.toString(), "用户管理(司法局文书管理)", true);
            e.getStackTrace();
            return new JsonResult(ResultCodes.ERROR, "用户新增操作保存失败！");
        }

        return jsonResult;
    }

    /**
     * 保存用户
     * @return
     */
    public JsonResult addLoginUser(ResultBean resultBean){
        String user_Id="";
        String searchCondition= "",searchContent="", pageNo="";
        LoginUser loginUser=new LoginUser();
        try {
            user_Id=usersUtil.getLoginUser_Id();

            loginUser = resultBean.getLoginUser();

            searchCondition = resultBean.getSearchCondition();
            searchContent = resultBean.getSearchContent()== null ? null : resultBean.getSearchContent().trim();
            pageNo = resultBean.getPageNo();

            int countName = loginUserService.checkRepeatLoginName(loginUser);
            if(countName > 0){
                return new JsonResult(ResultCodes.ERROR, StaticObj.REPEAT_MSG_NAME);
            }

            String jsonResults=JSON.toJSONString(loginUser);
            int result=0;
            if(loginUser.getGrantroles()!=null && !loginUser.getGrantroles().equals("")){
                result = loginUserService.insertUserRole(loginUser);
                if(result <= 0){
                    log(user_Id,"新增用户，保存用户角色失败",jsonResults,"用户管理(司法局文书管理)",true);
                    return new JsonResult(ResultCodes.ERROR, "用户新增操作保存失败！");
                }

            }

            result = loginUserService.addLoginUser(loginUser);
            if(result <= 0){
                return new JsonResult(ResultCodes.ERROR, "用户新增操作保存失败！");
            }

            if(result <= 0){
                log(user_Id,"新增用户保存失败",jsonResults,"用户管理(司法局文书管理)",true);
                return new JsonResult(ResultCodes.ERROR, "用户新增操作保存失败！");
            }

            log(user_Id,"新增用户保存成功",jsonResults,"用户管理(司法局文书管理)",false);
        } catch (Exception e) {
            log(user_Id,"新增用户保存失败",e.toString(),"用户管理(司法局文书管理)",true);
            e.printStackTrace();
            return new JsonResult(ResultCodes.ERROR, "用户新增操作保存失败！");
        }
        AuthElementTagProcessor.initAuthMap();
        return new JsonResult(ResultCodes.SUCCESS, "用户新增操作保存成功！", "/user/list?searchCondition="+searchCondition+"&searchContent="+searchContent+"&pageNo="+pageNo);
    }

    @RequestMapping(value="/edit")
    @ResponseBody
    public JsonResult edit(@RequestBody ResultBean resultBean) {
        JsonResult jsonResult = null;
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();

            //本系统数据库用户编辑
            jsonResult = this.updateLoginUser(resultBean);

            //单点登录系统用户编辑
            LoginUser loginUser = usersUtil.getUserById(resultBean.getLoginUser().getUser_Id());
            if(loginUser != null) {
                String jwt = usersUtil.getJwtCookie();
                String url = uumsUrl + "/userClient/updateLoginUser";
                String body = "";
                body = HttpClientUtil.sendPostDataByJson(url, JSON.toJSONString(resultBean), jwt);
                if (body != "" && !body.equals("")) {
                    JSONObject jsonobject = JSONObject.fromObject(body);
                    jsonResult = (JsonResult) JSONObject.toBean(jsonobject, JsonResult.class);
                } else {
                    log(user_Id, "用户编辑保存失败", "HttpClient调用uums系统的用户编辑方法返回结果为null", "用户管理(司法局文书管理)", false);
                    return new JsonResult(ResultCodes.ERROR, "用户编辑操作保存失败！");
                }
            }

        } catch (Exception e) {
            log(user_Id, "用户编辑保存失败", e.toString(), "用户管理(司法局文书管理)", true);
            e.getStackTrace();
            return new JsonResult(ResultCodes.ERROR, "用户编辑操作保存失败！");
        }

        return jsonResult;
    }

    public JsonResult updateLoginUser(ResultBean resultBean){
        String user_Id="",searchCondition="",searchContent="",pageNo="";
        try {
            user_Id=usersUtil.getLoginUser_Id();

            LoginUser loginUser = resultBean.getLoginUser();
            int countLoginName = loginUserService.checkRepeatLoginName(loginUser);
            if(countLoginName > 0){
                return new JsonResult(ResultCodes.ERROR, com.netmarch.sso.loginsystem.bean.StaticObj.REPEAT_MSG_NAME);
            }

            searchCondition = resultBean.getSearchCondition();
            searchContent = resultBean.getSearchContent()== null ? null : resultBean.getSearchContent().trim();
            pageNo = resultBean.getPageNo();
            //检查编辑界面的密码和DB的密码是否相同，BCryptPasswordEncoder编码的密码不可逆，所以编辑界面显示DB中存的加密后的字符串
            String editPagePassword = loginUser.getPassword();

            LoginUser loginUserTemp = new LoginUser();
            loginUserTemp.setUser_Id(loginUser.getUser_Id());

            loginUserTemp = loginUserService.checkLoginByUserId(loginUserTemp);//根据User_Id从数据库中取得该用户数据

            BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
            if(!editPagePassword.equals(loginUserTemp.getPassword())){
                //编辑界面的密码和DB的密码不相同时，把编辑页面上的密码加密存入DB，相同时说明没有更新密码,直接存编辑页面显示的密码
                loginUser.setPassword( encoder.encode(loginUser.getPassword()));
            }

            int countName = loginUserService.checkRepeatLoginName(loginUser);
            if(countName > 0){
                return new JsonResult(ResultCodes.ERROR, com.netmarch.sso.loginsystem.bean.StaticObj.REPEAT_MSG_NAME);
            }

            loginUser.setAdduser(user_Id);
            String areaCode_area=loginUser.getAreaCode();
            String areaCode = StringUtils.substringBeforeLast(areaCode_area, "_");
            loginUser.setAreaCode(areaCode);
            loginUser.setUsertype(2);//除单点登录系统外系统其他增加的用户默认用户类别为2：普通用户
            int result = loginUserService.updateLoginUser(loginUser);
            if(result <= 0){
                return new JsonResult(ResultCodes.ERROR,"用户编辑操作保存失败！");
            }
            Gson gson = new GsonBuilder().serializeNulls().create();
            String jsonResults = gson.toJson(loginUser);
            result = loginUserService.editUserRoleByUser(loginUser);

            if(result <= 0){
                log(user_Id, "用户编辑保存失败", jsonResults, "用户管理(司法局文书管理)", false);
                return new JsonResult(ResultCodes.ERROR,"用户编辑操作保存失败！");
            }
            log(user_Id, "用户编辑保存成功", "编辑后字段为:"+jsonResults, "用户管理(司法局文书管理)", false);
        } catch (Exception e) {
            log(user_Id,"用户编辑保存失败",e.toString(),"用户管理",true);
            e.printStackTrace();
            return new JsonResult(ResultCodes.ERROR,"用户编辑操作保存失败！");
        }
        return new JsonResult(ResultCodes.SUCCESS,"用户编辑操作保存成功！", "/user/list?searchCondition="+searchCondition+"&searchContent="+searchContent+"&pageNo="+pageNo);
    }



    @RequestMapping(value="delBatch" ,produces={ MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    public JsonResult delBatch(String ids,String searchCondition,String searchContent,String pageNo){
        JsonResult jsonResult = null;
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();

            //删除本地系统的用户
            jsonResult = this.delCurSystem(ids);

           /* //删除单点登录的用户   //本地有，单点登录没有时可能会有异常
            String jwt = usersUtil.getJwtCookie();
            String url = uumsUrl + "/userClient/delBatch";
            String body = "";
            Map<String, String> map = new HashMap<String, String>();
            map.put("ids", ids);
            map.put("searchCondition", searchCondition);
            map.put("searchContent", searchContent);
            map.put("pageNo", pageNo);

            body = HttpClientUtil.sendPostDataByJson(url, JSON.toJSONString(map), jwt);
            if (body != "" && !body.equals("")) {
                JSONObject jsonobject = JSONObject.fromObject(body);
                jsonResult = (JsonResult) JSONObject.toBean(jsonobject, JsonResult.class);
            } else {
                log(user_Id, "用户删除保存失败", "HttpClient调用uums系统的用户删除方法返回结果为null", "用户管理(司法局文书管理)", false);
                return new JsonResult(ResultCodes.ERROR, "用户删除操作保存失败！");
            }
*/
        } catch (Exception e) {
            log(user_Id, "用户删除保存失败", e.toString(), "用户管理(司法局文书管理)", true);
            e.getStackTrace();
            return new JsonResult(ResultCodes.ERROR, "用户删除操作保存失败！");
        }

        return jsonResult;
    }

    public JsonResult delCurSystem(String ids){
        String user_Id="",searchCondition="",searchContent="",pageNo="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            int result = loginUserService.delBatch(ids);
            if(result <= 0){
                log(user_Id,"删除用户保存失败","批量删除id为"+ids+"的用户信息失败","用户管理(司法局文书管理)",false);
                return new JsonResult(ResultCodes.ERROR,"用户删除操作保存失败！");
            }
            result = loginUserService.delUserRoles(ids);
            if(result <= 0){
                return new JsonResult(ResultCodes.ERROR,StaticObj.UPDATE_MSG_ERROR);
            }

            log(user_Id,"删除用户保存成功","批量删除id为"+ids+"的用户信息","用户管理(司法局文书管理)",false);
        } catch (Exception e) {
            log(user_Id,"删除用户保存失败",e.toString(),"用户管理(司法局文书管理)",true);
            e.printStackTrace();
            return new JsonResult(ResultCodes.ERROR,"用户删除操作保存失败！");
        }
        AuthElementTagProcessor.initAuthMap();
        return new JsonResult(ResultCodes.SUCCESS,"用户删除操作保存成功！", "/user/list");
    }


    @RequestMapping(value="/exportUsers")
    @ResponseBody
    public String exportUsers(Query userQuery){
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            String jwt = usersUtil.getJwtCookie();
          //  List<LoginUser> usersList = loginUserClient.getUsers(userQuery);
            String url = uumsUrl + "/userClient/getUsers";
            String body = "";
            List<LoginUser> usersList=null;
            body = HttpClientUtil.sendPostDataByJson(url, JSON.toJSONString(userQuery), jwt);
            if(body!="" && !body.equals("")) {
                usersList = (List<LoginUser>) JSONArray.parseArray(body, LoginUser.class);
            }
            loginUserService.exportUsers(response,usersList);
            log(user_Id,"导出用户信息","批量导出用户信息成功","文书管理系统(司法局文书管理)",false);
        }catch (Exception e){
            log(user_Id,"导出用户信息",e.toString(),"文书管理系统(司法局文书管理)",true);
            e.printStackTrace();
            return null;
        }
        return  null;
    }



}
