package com.netmarch.wssacw.system.controller;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.Page;
import com.netmarch.sso.loginsystem.bean.LoginUser;
import com.netmarch.sso.loginsystem.client.LoginUserClient;
import com.netmarch.wssacw.common.controller.FrontBaseController;
import com.netmarch.wssacw.common.thymeleaf.AuthElementTagProcessor;
import com.netmarch.wssacw.common.utils.UsersUtil;
import com.netmarch.wssacw.system.bean.Departments;
import com.netmarch.wssacw.system.bean.StaticObj;
import com.netmarch.wssacw.system.client.DepartmentsClient;
import com.netmarch.wssacw.system.model.Query;
import com.netmarch.wssacw.system.service.DepartmentsService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import util.web.JsonResult;
import util.web.ResultCodes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.UUID;

;

@Controller
@RequestMapping("/departments/*")
@Slf4j
/*
* 科室管理
* */
public class DepartmentsController extends FrontBaseController implements DepartmentsClient {

    @Autowired
    HttpServletRequest request;

    @Autowired
    HttpServletResponse response;

    @Autowired
    private DepartmentsService departmentsService;

    @Autowired
    private LoginUserClient loginUserClient;

    @Autowired
    UsersUtil usersUtil;

    @RequestMapping(value = {"departmentsList", "tableList"})
    public String list(Departments departments, Query departmentsQuery, Model model){
        String requestURI="",user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            String searchCondition= request.getParameter("searchCondition");
            String searchContent= request.getParameter("searchContent");
            departmentsQuery.setSearchCondition(searchCondition);
            departmentsQuery.setSearchContent(searchContent);

            LoginUser user = loginUserClient.getUserById(user_Id);

            String area=user.getArea();
            if(area.indexOf("公安局") != -1){
                departments.setBm("公安局");
            }else if(area.indexOf("检察院") != -1){
                departments.setBm("检察院");
            }else if(area.indexOf("法院") != -1){
                departments.setBm("法院");
            }
            else if(area.indexOf("司法局") != -1){
                departments.setBm("司法局");
            }
            else if(area.indexOf("政法委") != -1){
                departments.setBm("政法委");
            }
            Page<Departments> departmentsList = departmentsService.getDepartmentsList(departments,departmentsQuery);
            model.addAttribute("list", departmentsList);
            log(user_Id,"查询列表","获取科室管理列表","科室管理",false);
            requestURI=request.getRequestURI();
        } catch (Exception e) {
            e.printStackTrace();
            log(user_Id,"查询列表",e.toString(),"科室管理",true);
        }
        if(requestURI.equals("/wssacwgl/departments/tableList")){
            return "departments/list::table_refresh";
        }
        else if(requestURI.equals("/wssacwgl/departments/departmentsList")) {
            return "departments/list";
        }
        return "departments/list";
    }

    /*
     * 添加页面
     * @param model
     * @return
     */
    @RequestMapping("toAdd")
    public String toAdd(Model model){
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            LoginUser user = loginUserClient.getUserById(user_Id);
            model.addAttribute("bean", user);

            String area=user.getArea();
            String areaCode=user.getAreaCode();
            model.addAttribute("area", area);
            model.addAttribute("areaCode", areaCode);

        } catch (Exception e) {
            log(user_Id, "科室管理列表", e.toString(), "科室管理", true);
            e.printStackTrace();
        }
        return "departments/add";
    }

    /**
     * 编辑页面
     * @param model
     * @return
     */
    @GetMapping("toEdit")
    public String toEdit(Model model, String id){
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            LoginUser user = loginUserClient.getUserById(user_Id);
            model.addAttribute("bean", user);
            String area=user.getArea();
            String areaCode=user.getAreaCode();
            model.addAttribute("area", area);
            model.addAttribute("areaCode", areaCode);

            Departments departments = departmentsService.getDepartmentsById(id);
            model.addAttribute("bean", departments);
            String jsonResults = JSON.toJSONString(departments);
            log(user_Id, "修改科室","编辑前科室信息为:" + jsonResults, "科室管理", false);

        } catch (Exception e) {
            log(user_Id, "修改科室", e.toString(), "科室管理", true);
            e.printStackTrace();
        }
        return "departments/edit";
    }

    /**
     * 保存用户
     * @param  departments
     * @return
     */
    @RequestMapping("/add")
    @ResponseBody
    public JsonResult save(Departments departments){
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            departments.setId(UUID.randomUUID().toString());
            departments.setEdituser(user_Id);
            String area = departments.getArea();
            if(area.indexOf("公安局") != -1){
                departments.setBm("公安局");
            }else if(area.indexOf("检察院") != -1){
                departments.setBm("检察院");
            }else if(area.indexOf("法院") != -1){
                departments.setBm("法院");
            }
            else if(area.indexOf("司法局") != -1){
                departments.setBm("司法局");
            }
            else if(area.indexOf("政法委") != -1){
                departments.setBm("政法委");
            }
            String jsonResults= JSON.toJSONString(departments);
            int result = departmentsService.addDepartments(departments);
            if(result <= 0){
                log(user_Id,"新增科室","新增科室失败"+jsonResults,"科室管理",false);
                return new JsonResult(ResultCodes.ERROR, StaticObj.UPDATE_MSG_ERROR);
            }

            log(user_Id,"新增科室",jsonResults,"科室管理",false);
        } catch (Exception e) {
            log(user_Id,"新增科室",e.toString(),"科室管理",true);
            e.printStackTrace();
            return new JsonResult(ResultCodes.ERROR, StaticObj.UPDATE_MSG_ERROR);
        }
        AuthElementTagProcessor.initAuthMap();
        return new JsonResult(ResultCodes.SUCCESS, StaticObj.UPDATE_MSG_SUCCESS, "../departments/tableList");
    }

    @RequestMapping("/edit")
    @ResponseBody
    public JsonResult edit(Departments departments){
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            departments.setEdituser(user_Id);
            String jsonResults= JSON.toJSONString(departments);
            int result = departmentsService.editDepartments(departments);;
            if(result <= 0){
                log(user_Id,"科室编辑","科室编辑失败"+jsonResults,"科室管理",false);
                return new JsonResult(ResultCodes.ERROR,StaticObj.UPDATE_MSG_ERROR);
            }
            log(user_Id,"科室编辑","编辑后科室信息为:"+jsonResults,"科室管理",false);
        } catch (Exception e) {
            log(user_Id,"科室编辑",e.toString(),"科室管理",true);
            e.printStackTrace();
            return new JsonResult(ResultCodes.ERROR,StaticObj.UPDATE_MSG_ERROR);
        }
        return new JsonResult(ResultCodes.SUCCESS,StaticObj.UPDATE_MSG_SUCCESS, "../departments/tableList");
    }

    @RequestMapping("delBatch")
    @ResponseBody
    public JsonResult delBatch(String ids){
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();
            int result =departmentsService.delBatch(ids);
            if(result <= 0){
                log(user_Id,"删除科室","批量删除id为"+ids+"的用户信息失败","科室管理",false);
                return new JsonResult(ResultCodes.ERROR,StaticObj.UPDATE_MSG_ERROR);
            }
            log(user_Id,"批量删除科室","删除ID为:"+ids+"的涉案财物信息","科室管理",false);
        } catch (Exception e) {
            log(user_Id,"批量删除科室",e.toString(),"科室管理",true);
            e.printStackTrace();
            return new JsonResult(ResultCodes.ERROR,StaticObj.UPDATE_MSG_ERROR);
        }
        AuthElementTagProcessor.initAuthMap();
        return new JsonResult(ResultCodes.SUCCESS,StaticObj.UPDATE_MSG_SUCCESS, "/departments/tableList");
    }
    @RequestMapping(value="/exportDepartments")
    @ResponseBody
    public String exportDepartments(Query departmentQuery){
        String user_Id="";
        try {
            user_Id=usersUtil.getLoginUser_Id();

            List<Departments> departmentsList = departmentsService.getDepartments(departmentQuery);
            departmentsService.exportDepartments(response,departmentsList);
            log(user_Id,"导出科室信息","批量导出科室信息成功","科室管理",false);
        }catch (Exception e){
            log(user_Id,"导出科室信息",e.toString(),"科室管理",true);
            e.printStackTrace();
            //  return new JsonResult(ResultCodes.ERROR, StaticObj.UPDATE_MSG_ERROR);
        }
        //  return new JsonResult(ResultCodes.SUCCESS, StaticObj.UPDATE_MSG_SUCCESS);
        return  null;
    }

}
