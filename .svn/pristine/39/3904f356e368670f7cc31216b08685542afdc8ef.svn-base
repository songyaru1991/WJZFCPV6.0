package com.netmarch.figurecloud.gateway.util;

import com.alibaba.fastjson.JSON;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.netflix.zuul.context.RequestContext;
import com.netmarch.figurecloud.gateway.config.FilterConfig;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.util.AntPathMatcher;
import org.springframework.util.PathMatcher;
import util.exception.http.ErrorConstants;
import util.exception.http.ResponseException;
import util.web.TokenUtil;

import javax.annotation.PostConstruct;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static com.netmarch.figurecloud.gateway.contants.FilterOrderConstants.RESPONSE_SEND;

@Component
@Log4j2
public class FilterUtils {
    public static final String XML_HTTP_REQUEST = "XMLHttpRequest";
    private static final String X_REQUESTED_WITH = "X-Requested-With";
    public static final String USER_AGENT= "user-agent";
    public static final String BROWER_PREFIX = "mozilla";
    public static final String CONTENT_TYPE = "Content-Type";
    public static String HEADER_PREFIX = "Bearer ";
    private static ObjectMapper objectMapper = new ObjectMapper();
    private static PathMatcher matcher = new AntPathMatcher();
    public static final int DEFAULT_EXPIRE_SECONDS = 600;

    @Autowired
    FilterConfig filterConfig;
    private List<String> skipUrls;
    @PostConstruct
    private void init() {
        String skipUrlsText = filterConfig.getSkipUrls();
        if (!StringUtils.isEmpty(skipUrlsText)){
            List<String> skipUrlsTmp = Arrays.asList(skipUrlsText.split(","));
            String prefix = filterConfig.getPrefix();
            this.skipUrls = skipUrlsTmp.stream().map(item -> {
                return prefix+item.trim();
            }).collect(Collectors.toList());
        }
    }
    private static String getToken(String tokenName){
        RequestContext ctx = RequestContext.getCurrentContext();
        String token = "";
        if (isBrowser()){
            token = getFromCookie(tokenName);
        }else if (StringUtils.isEmpty(token)) {
            token = ctx.getRequest().getHeader(tokenName);
        }
        else if (StringUtils.isEmpty(token)){
            token = ctx.getZuulRequestHeaders().get(tokenName);
        }
        //添加前缀
        if (!StringUtils.isEmpty(token)
                && !token.startsWith(HEADER_PREFIX)
                && token.indexOf(".") != -1){
            token = HEADER_PREFIX + token;
        }
        return token;
    }
    /**
     * 获取请求token
     * web浏览器从cookie中获取
     * @return
     */
    public static String getBearerAccessToken(){
        return getToken(TokenUtil.ACCESS_TOKEN);
    }
    public static String getBearerRefreshToken(){
        return getToken(TokenUtil.REFRESH_TOKEN);
    }
    public static void addZuulRequestHeader(String name,String value) throws UnsupportedEncodingException {
        RequestContext ctx = RequestContext.getCurrentContext();
        value = URLEncoder.encode(value,"UTF-8");
        ctx.addZuulRequestHeader(name,value);
    }
    /**
     * 根据名称获取cookie值
     * @param name
     * @return
     */
    public static String getFromCookie(@NotNull String name){
        try {
            RequestContext ctx = RequestContext.getCurrentContext();
            if ( ctx.getRequest().getCookies()!=null) {
                for (Cookie cookie: ctx.getRequest().getCookies()){
                    if (name.equals(cookie.getName())){
                        return  cookie.getValue();
                    }
                }
            }
        } catch (Exception e) {
            log.error(e);
            ResponseException.valueOf("获取cookie错误");
        }
        return null;
    }
    public static boolean isBrowser(){
        RequestContext ctx = RequestContext.getCurrentContext();
        String userAgent = ctx.getRequest().getHeader(USER_AGENT);
        return !StringUtils.isEmpty(userAgent) && userAgent.toLowerCase().startsWith(BROWER_PREFIX);
    }
    public static HttpServletRequest getRequest(){
        return RequestContext.getCurrentContext().getRequest();
    }
    public static HttpServletResponse getResponse(){
        return getRequestContext().getResponse();
    }

    /**
     * 是否跳过
     * @return
     */
    public  boolean isSkipRequest(){
        String uri = getRequest().getRequestURI();
        return !CollectionUtils.isEmpty(skipUrls) && skipUrls.stream().anyMatch(pattern  -> {
            return matcher.match(pattern,uri);
        });
    }
    public boolean isLoginRequest(){
        String uri = getRequest().getRequestURI();
        return !StringUtils.isEmpty(uri) && uri.equals(filterConfig.getLoginEndpoint());
    }
    public boolean isRefreshTokenRequest(){
        String uri = getRequest().getRequestURI();
        return !StringUtils.isEmpty(uri) && uri.equals(filterConfig.getRefreshTokenEndpoint());
    }

    /**
     *
     * @return
     */
    public static boolean isResponseOk(){
        return HttpStatus.OK.value() == getRequestContext().getResponseStatusCode();
    }

    /**
     * 阻塞网关请求
     */
    public static void blocksRequest(){
        RequestContext ctx = RequestContext.getCurrentContext();
        ctx.setSendZuulResponse(false);
    }
    public static void setResponseBody(Object obj){
        if (!(obj instanceof String)){
            obj = JSON.toJSONString(obj);
        }
        RequestContext ctx = RequestContext.getCurrentContext();
        ctx.setResponseBody(obj.toString());
    }
    public static RequestContext getRequestContext(){
        return RequestContext.getCurrentContext();
    }
    public static void addResponseHead(String name,String value){
        getRequestContext().addZuulResponseHeader(name,value);
    }
    public static void setResponseStatusCode(int value){
        getRequestContext().setResponseStatusCode(value);
    }

    /**
     * 处理异常
     * @param status
     * @param message
     * @throws IOException
     */
    public void redirectToErrorPage(@NotNull int status,String message) throws IOException {
            //未登录
             String errorURl = "";
            if (status == HttpStatus.UNAUTHORIZED.value()){
                errorURl = filterConfig.getLoginPage();
            }else {
                if (StringUtils.isEmpty(message)){
                    message = getMessageByHttpStatus(status);
                }
                errorURl = filterConfig.getErrorPage() +"?no="+Integer.toString(status)
                        +"&msg="+ URLEncoder.encode(message,"UTF-8");
            }
            getResponse().sendRedirect(errorURl);
    }
    private String getMessageByHttpStatus(int status){
        switch (status){
            case 400: return ErrorConstants.ERROR_400;
            case 403: return ErrorConstants.ERROR_403;
            case 404: return ErrorConstants.ERROR_404;
            case 500: return ErrorConstants.ERROR_500;
            default: return ErrorConstants.UNKNOWN_EXCEPTION;
        }
    }
    public  void responseExceptionHandle(ResponseException exception)throws IOException {
        if (exception.getCause()!=null){
            log.error(exception);
        }else{
            log.info(exception.getMessage());
        }
        //阻塞请求
        blocksRequest();
        HttpServletResponse response = getResponse();
        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);
        if (FilterUtils.isBrowser() && !FilterUtils.isAjax()){
            //重定向错误页面
            redirectToErrorPage(exception.getStatus(),exception.getMessage());
        }else{
            response.setStatus(exception.getStatus());
            objectMapper.writeValue(response.getWriter(),exception.errorResponse());
        }
        //设置已经发送response
        getRequestContext().set(RESPONSE_SEND,true);
        getRequestContext().setSendZuulResponse(true);
    }
    public static boolean isAjax() {
        return XML_HTTP_REQUEST.equals(getRequest().getHeader(X_REQUESTED_WITH));
    }
    /**
     * 获取过期时间
     */
    public int getExpireSeconds(){
        return  filterConfig.getLoginExpireSeconds()!= null? filterConfig.getLoginExpireSeconds() : DEFAULT_EXPIRE_SECONDS;
    }
}
