package com.netmarch.sso.common.utils;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class ModelToMapUtil {
    /**
     * 实体对象转成Map
     * @param obj 实体对象
     * @return
     */
    public static Map<String, String> objectToMap(Object obj) {
        Map<String, String> map = new HashMap<>();
        if (obj == null) {
            return map;
        }
        Class clazz = obj.getClass();
        Field[] fields = clazz.getDeclaredFields();// 获取对象对应类中的所有属性域
        try {
            for (Field field : fields) {
                field.setAccessible(true);//对私有字段的访问取消权限检查。暴力访问。
                if(field.get(obj) !="" && field.get(obj)!=null) {
                  //  System.out.println("字段："+field.getType().getName()+",值："+field.get(obj));
                    map.put(field.getName(), field.get(obj).toString());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }
    /**
     * Map转成实体对象
     * @param map map实体对象包含属性
     * @param clazz 实体对象类型
     * @return
     */
    public static Object mapToObject(Map<String, String> map, Class<?> clazz) {
        if (map == null) {
            return null;
        }
        Object obj = null;
        try {
            obj = clazz.newInstance();

            Field[] fields = obj.getClass().getDeclaredFields();
            for (Field field : fields) {
                int mod = field.getModifiers();
                if (Modifier.isStatic(mod) || Modifier.isFinal(mod)) {
                    continue;
                }
                field.setAccessible(true);

                String filedTypeName = field.getType().getName();
              //  System.out.println("filedTypeName:"+ filedTypeName +",map.get(field.getName())："+map.get(field.getName()));
                if (filedTypeName.equalsIgnoreCase("java.util.date")) {
                    if (map.get(field.getName())== null || map.get(field.getName()).equalsIgnoreCase("null")) {
                        field.set(obj, null);
                    } else {
                      /*  String datetimestamp = map.get(field.getName());
                        field.set(obj, new Date(Long.parseLong(datetimestamp)));*/
                        //String str="Thu May 07 14:33:19 CST 2015";
                        String datetimestamp = map.get(field.getName());
                        String pattern = "EEE MMM dd HH:mm:ss zzz yyyy";
                        SimpleDateFormat df = new SimpleDateFormat(pattern, Locale.US);
                        Date date = df.parse(datetimestamp);
                        field.set(obj, date);
                    }
                }else if(filedTypeName.equalsIgnoreCase("java.lang.Integer")){
                    if (map.get(field.getName().toString()) == null || map.get(field.getName().toString()).equalsIgnoreCase("null")) {
                        field.set(obj, null);
                    } else {
                        int intstamp = Integer.valueOf(map.get(field.getName()));
                        field.set(obj, intstamp);
                    }
                }else {
                    field.set(obj, map.get(field.getName()));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return obj;
    }

   /* json转化为model
   JSONObject jsonObject=JSONObject.fromObject(loginUserJson);
    loginUser=(LoginUser)JSONObject.toBean(jsonObject, LoginUser.class);*/
}
