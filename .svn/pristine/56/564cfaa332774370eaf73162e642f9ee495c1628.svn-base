package com.netmarch.figurecloud.auth.core.security.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.netmarch.figurecloud.auth.core.CustomCorsFilter;
import com.netmarch.figurecloud.auth.core.RestAuthenticationEntryPoint;
import com.netmarch.figurecloud.auth.core.security.authenticate.jwt.JwtAuthenticationProvider;
import com.netmarch.figurecloud.auth.core.security.authenticate.jwt.JwtTokenAuthenticationProcessingFilter;
import com.netmarch.figurecloud.auth.core.security.authenticate.jwt.SkipPathRequestMatcher;
import com.netmarch.figurecloud.auth.core.security.authenticate.jwt.extractor.TokenExtractor;
import com.netmarch.figurecloud.auth.core.security.authenticate.login.LoginAuthenticationProvider;
import com.netmarch.figurecloud.auth.core.security.authenticate.login.LoginProcessingFilter;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/** 
* @Description: WebSecurityConfig 功能内容描述
* @Author: fengxiang
* @Date: 2019/2/15 14:01
*/ 
@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
    public static final String AUTHENTICATION_PARAM_NAME = "_token";
    public static final String AUTHENTICATION_URL = "/auth/login";
    public static final String REFRESH_TOKEN_URL = "/auth/token";
    public static final String API_ROOT_URL = "/**/*";

    @Autowired
    private RestAuthenticationEntryPoint authenticationEntryPoint;
    @Autowired
    private AuthenticationSuccessHandler successHandler;
    @Autowired
    private AuthenticationFailureHandler failureHandler;
    @Autowired
    private LoginAuthenticationProvider ajaxAuthenticationProvider;
    @Autowired
    private JwtAuthenticationProvider jwtAuthenticationProvider;

    @Autowired
    private TokenExtractor tokenExtractor;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private ObjectMapper objectMapper;
    @Autowired
    private WebFilterConfig webFilterConfig;
    protected LoginProcessingFilter buildLoginProcessingFilter(String loginEntryPoint) throws Exception {
        LoginProcessingFilter filter = new LoginProcessingFilter(loginEntryPoint, successHandler, failureHandler, objectMapper);
        filter.setAuthenticationManager(this.authenticationManager);
        return filter;
    }

    protected JwtTokenAuthenticationProcessingFilter buildJwtTokenAuthenticationProcessingFilter(List<String> pathsToSkip, String pattern) throws Exception {
        SkipPathRequestMatcher matcher = new SkipPathRequestMatcher(pathsToSkip, pattern);
        JwtTokenAuthenticationProcessingFilter filter
            = new JwtTokenAuthenticationProcessingFilter(failureHandler, tokenExtractor, matcher);
        filter.setAuthenticationManager(this.authenticationManager);
        return filter;
    }

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) {
        auth.authenticationProvider(ajaxAuthenticationProvider);
        auth.authenticationProvider(jwtAuthenticationProvider);
    }
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {

        List<String> permitAllEndpointList = new ArrayList<>(Arrays.asList(
                AUTHENTICATION_URL,
                REFRESH_TOKEN_URL
        ));
        // 添加不过滤的url
        String noFilters = webFilterConfig.getSkipUrls();
        if(!StringUtils.isBlank(noFilters)){
            String[] noFilterArray = noFilters.split(",");
            if(!ArrayUtils.isEmpty(noFilterArray)){
                permitAllEndpointList.addAll(Arrays.asList(noFilterArray));
            }
        }
        //基于JWT的身份验证不需要CSRF
        http
            .csrf().disable()
            .exceptionHandling()
            .authenticationEntryPoint(this.authenticationEntryPoint)

            .and()
                .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)

            .and()
                .authorizeRequests()
                .antMatchers(permitAllEndpointList.toArray(new String[permitAllEndpointList.size()]))
                .permitAll()
            .and()
            .headers().frameOptions().disable()
            .and()
                .authorizeRequests()
                //受保护的API端点
                .antMatchers(API_ROOT_URL).authenticated()
            .and()
                .addFilterBefore(new CustomCorsFilter(), UsernamePasswordAuthenticationFilter.class)
                .addFilterBefore(buildLoginProcessingFilter(AUTHENTICATION_URL), UsernamePasswordAuthenticationFilter.class)
                .addFilterBefore(buildJwtTokenAuthenticationProcessingFilter(permitAllEndpointList,
                API_ROOT_URL), UsernamePasswordAuthenticationFilter.class);
    }
}
