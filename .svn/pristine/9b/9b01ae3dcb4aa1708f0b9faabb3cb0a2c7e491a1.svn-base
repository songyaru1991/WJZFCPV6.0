package com.netmarch.figurecloud.gateway.filters;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.netflix.zuul.ZuulFilter;
import com.netflix.zuul.exception.ZuulException;
import com.netmarch.figurecloud.gateway.config.FilterConfig;
import com.netmarch.figurecloud.gateway.contants.FilterOrderConstants;
import com.netmarch.figurecloud.gateway.util.FilterUtils;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import util.web.TokenUtil;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;

@Component
@Log4j2
public class LoginSuccessPostFilter extends ZuulFilter {
    public static final String GLOBAL_PATH="/";
    @Autowired
    ObjectMapper objectMapper;
    @Autowired
    FilterUtils filterUtils;
    @Override
    public String filterType() {
        return FilterOrderConstants.POST_FILTER_TYPE;
    }

    @Override
    public int filterOrder() {
        return FilterOrderConstants.LOGIN_SUCCESS_POST;
    }

    /**
     * 浏览器登录之后处理
     * @return
     */
    @Override
    public boolean shouldFilter() {
        return (filterUtils.isLoginRequest() || filterUtils.isRefreshTokenRequest())
                && FilterUtils.isBrowser()
                && FilterUtils.isResponseOk();
    }

    @Override
    public Object run() throws ZuulException {
        try {
            HttpServletResponse response = FilterUtils.getResponse();
            String json = IOUtils.toString(FilterUtils.getRequestContext().getResponseDataStream());
            JSONObject object = JSON.parseObject(json);
            FilterUtils.setResponseBody(object);
            String accessToken = object.getString("token");
            if (TokenUtil.isJwtToken(accessToken)){
                Cookie accessTokenCookie = new Cookie(TokenUtil.ACCESS_TOKEN,accessToken);
                accessTokenCookie.setPath(GLOBAL_PATH);
                accessTokenCookie.setMaxAge(filterUtils.getExpireSeconds());
                response.addCookie(accessTokenCookie);
            }
            String refreshToken = object.getString("refreshToken");
            if (TokenUtil.isJwtToken(refreshToken)){
                Cookie refreshTokenCookie = new Cookie(TokenUtil.REFRESH_TOKEN,refreshToken);
                refreshTokenCookie.setPath(GLOBAL_PATH);
                refreshTokenCookie.setMaxAge(filterUtils.getExpireSeconds());
                response.addCookie(refreshTokenCookie);
            }
        } catch (Exception e) {
            log.error(e);
        }
        return null;
    }
}
