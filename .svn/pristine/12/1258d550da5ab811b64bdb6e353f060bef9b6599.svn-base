package com.netmarch.fdfs.system;

import com.netmarch.fdfs.common.utils.Redis.StringJedisUtil;
import com.netmarch.fdfs.common.utils.JwtUtil;
import com.netmarch.fdfs.system.bean.StaticObj;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@Component
@Slf4j
public class LoginInterceptor implements HandlerInterceptor {

    /**
     * 在请求被处理之前调用
     * @param request
     * @param response
     * @param handler
     * @return
     * @throws Exception
     */
    /**
     * RefreshToken过期时间
     */
    @Value("${refreshTokenExpireTime}")
    private String refreshTokenExpireTime;
    private Logger logger = LoggerFactory.getLogger(this.getClass());
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object o) throws Exception {
        // String requestURL = request.getRequestURL().toString();
        String requestURL = "http://172.16.11.20:8088/fdfs/archive/caseManage?listType=bm";
        String loginVerifyURL = "http://172.16.11.20:8088/fdfs/loginVerify";
        String redirectUrl = "http://172.16.11.251:8088/uums/login?callbackURL=" + loginVerifyURL;

        try {
            String jwt = "";
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                if (cookies != null) {
                    for (Cookie c : cookies) {
                        if (c.getName().equals("jwt")) {
                            jwt = c.getValue();
                            break;
                        }
                    }
                }
                if (jwt != "" && !jwt.equals("")) {
                    //客户端cookie中存的为key:sid    value:tonken
                    String userId = JwtUtil.getClaim(jwt, StaticObj.USERID);
                    if (userId != null && !userId.equals("")) {
                        if (StringJedisUtil.exists(StaticObj.PREFIX_ACCESS_TOKEN + userId)) {
                            //String token = JedisUtil.getJson(c.getValue());// 从 redis中取出 token
                            //验证cookie里的token是否合法
                            if (JwtUtil.verify(jwt)) {
                                StringJedisUtil.setObject(StaticObj.PREFIX_ACCESS_TOKEN  + userId, jwt, Integer.parseInt(refreshTokenExpireTime));
                                return true;
                            } else {
                                logger.error("JWT验证异常，链接:" + requestURL);
                                response.sendRedirect(redirectUrl);
                                return false;
                            }
                        } else {
                            response.sendRedirect(redirectUrl);
                            return false;
                        }
                    } else {
                        logger.error("cookie中token获取userId失败，链接:" + requestURL);
                        response.sendRedirect(redirectUrl);
                        return false;
                    }
                }else{
                    logger.error("cookie中获取sId失败，链接:" + requestURL);
                    response.sendRedirect(redirectUrl);
                    return false;
                }
            } else {
                logger.error("cookie不存在，链接:" + requestURL);
                //参数乱码 message = URLEncoder.encode(message,"GBK");
                response.sendRedirect(redirectUrl);
                return false;
            }
        } catch (Exception e) {
            logger.error("登录拦截器异常");
            response.sendRedirect(redirectUrl);
            return false;
        }
    }

    /**
     * 在请求被处理后，视图渲染之前调用
     * @param request
     * @param response
     * @param handler
     * @param modelAndView
     * @throws Exception
     */
    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,ModelAndView modelAndView) throws Exception {

    }

    /**
     * 在整个请求结束后调用
     * @param request
     * @param response
     * @param handler
     * @param ex
     * @throws Exception
     */
    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {

    }
}
