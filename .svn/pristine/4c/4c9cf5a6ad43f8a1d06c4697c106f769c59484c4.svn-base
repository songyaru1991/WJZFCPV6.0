package com.netmarch.jzznyj.common.utils.Redis;

import com.netmarch.jzznyj.system.exception.CustomException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

import java.util.List;
import java.util.Map;

/**
 * 操作redis中的hash
 *
 * @author songyaru
 * @create 2019-04-30
 **/
@Component
public class HashJedisUtil {

    private static JedisPool jedisPool;

    @Autowired
    public void setJedisPool(JedisPool jedisPool) {
        HashJedisUtil.jedisPool = jedisPool;
    }

    /**
     * 获取Jedis实例
     * @param
     * @return redis.clients.jedis.Jedis
     * @author songyaru
     * @date 2019/4/24
     */
    public static synchronized Jedis getJedis() {
        try {
            if (jedisPool != null) {
                return jedisPool.getResource();
            } else {
                return null;
            }
        } catch (Exception e) {
            throw new CustomException("获取Jedis资源异常:" + e.getMessage());
        }
    }
    /**
     * 释放Jedis资源
     * @param
     * @return void
     * @author songyaru
     * @date 2019/4/24
     */
    public static void closeJedisPool(Jedis jedis) {
        try {
            if (jedis != null) {
                jedis.close();
            }
        } catch (Exception e) {
            throw new CustomException("释放Jedis资源异常:" + e.getMessage());
        }
    }

    /**
     * 添加一条记录 如果map_key存在 则更新value
     * hset 如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。
     * 如果字段已经存在于哈希表中，旧值将被覆盖
     *
     * @param key
     * @param field
     * @param value
     * @return
     */
    public static long set(String key, String field, String value) {
        Jedis jedis = null;
        try{
            jedis = getJedis();
            return jedis.hset(key, field, value);
        } catch (Exception e) {
            throw new CustomException("设置Redis键值hset方法异常:key=" + key + " value=" + value + " cause=" + e.getMessage());
        } finally {
            closeJedisPool(jedis);
        }

    }

    /**
     * 批量添加记录
     * hmset 同时将多个 field-value (域-值)对设置到哈希表 key 中。
     * 此命令会覆盖哈希表中已存在的域。
     * 如果 key 不存在，一个空哈希表被创建并执行 HMSET 操作。
     * @param key
     * @param map
     * @return
     */
    public static String setAll(String key, Map<String, String> map) {
        Jedis jedis = null;
        try{
            jedis = getJedis();
            return jedis.hmset(key, map);
        } catch (Exception e) {
            throw new CustomException("设置Redis键值hset方法异常:key=" + key + " value=" + map + " cause=" + e.getMessage());
        } finally {
            closeJedisPool(jedis);
        }
    }

    /**
     * 删除hash中 field对应的值
     * hdel 删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略
     * @param key
     * @return
     */
    public static long deleteKey(String key) {
        Jedis jedis = null;
        try{
            jedis = getJedis();
            return jedis.del(key);
        } catch (Exception e) {
            throw new CustomException("删除hash中 field对应的值 hdel方法异常:key=" + key + ", cause=" + e.getMessage());
        } finally {
            closeJedisPool(jedis);
        }
    }

    /**
     * 删除hash中 field对应的值
     * hdel 删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略
     * @param key
     * @param field
     * @return
     */
    public static long deleteField(String key, String... field) {
        Jedis jedis = null;
        try{
            jedis = getJedis();
            return jedis.hdel(key, field);
        } catch (Exception e) {
            throw new CustomException("删除hash中 field对应的值 hdel方法异常:key=" + key + ", cause=" + e.getMessage());
        } finally {
            closeJedisPool(jedis);
        }
    }

    /**
     * 获取hash中 指定的field的值
     * hmget 返回哈希表 key 中，一个或多个给定域的值。
     * 如果给定的域不存在于哈希表，那么返回一个 nil 值。
     * 不存在的 key 被当作一个空哈希表来处理，所以对一个不存在的 key 进行 HMGET 操作将返回一个只带有 nil 值的表。

     * @param key
     * @param field
     * @return
     */
    public static List<String> get(String key, String... field) {
        Jedis jedis = null;
        try{
            jedis = getJedis();
            return jedis.hmget(key, field);
        } catch (Exception e) {
            throw new CustomException("获取hash中 指定的field的值 hmget方法异常:key=" + key + ", cause=" + e.getMessage());
        } finally {
            closeJedisPool(jedis);
        }
    }

    /**
     * 获取hash中 所有的field value
     * @param key
     * @return 在返回值里，紧跟每个字段名(field name)之后是字段的值(value)，所以返回值的长度是哈希表大小的两倍。
     */
    public static Map<String, String> getAll(String key) {
        Jedis jedis = null;
        try{
            jedis = getJedis();
            return jedis.hgetAll(key);
        } catch (Exception e) {
            throw new CustomException("获取hash中 所有的field value hgetAll方法异常:key=" + key + ", cause=" + e.getMessage());
        } finally {
            closeJedisPool(jedis);
        }
    }

    /**
     * 判断hash中 指定的field是否存在
     * @param key
     * @param field
     * @return 如果哈希不包含字段或key不存在 返回0，如果哈希包含字段 返回1
     */
    public static boolean ifExist( String key, String field) {
        Jedis jedis = null;
        try{
            jedis = getJedis();
            return jedis.hexists(key, field);
        } catch (Exception e) {
            throw new CustomException("判断hash中 指定的field是否存在hexists方法异常:key=" + key + ", cause=" + e.getMessage());
        } finally {
            closeJedisPool(jedis);
        }
    }

    /**
     * 获取hash 的size
     * hlen 获取哈希表中字段的数量
     * @param key
     * @return
     */
    public static long size(String key) {
        Jedis jedis = null;
        try{
            jedis = getJedis();
            return jedis.hlen(key);
        } catch (Exception e) {
            throw new CustomException("获取hash 的size hlen方法异常:key=" + key + ", cause=" + e.getMessage());
        } finally {
            closeJedisPool(jedis);
        }
    }

}
